#!/usr/bin/env node

var argv = require('optimist').argv
var path = require('path')
var Elasticdump = require(path.join(__dirname, '..', 'elasticdump.js'))
var packageData = require(path.join(__dirname, '..', 'package.json'))
var fs          = require('fs')

// For future developers.  If you add options here, be sure to add the option to test suite tests where necessary
var defaults = {
  limit: 10000,
  offset: 0,
  debug: false,
  type: 'data',
  delete: false,
  maxSockets: null,
  input: null,
  'input-index': null,
  output: null,
  'output-index': null,
  inputTransport: null,
  outputTransport: null,
  searchBody: null,
  searchBodyFile: null,
  sourceOnly: false,
  jsonLines: false,
  format: '',
  'ignore-errors': false,
  scrollTime: '10m',
  timeout: null,
  toLog: null,
  quiet: false,
  awsAccessKeyId: null,
  awsSecretAccessKey: null,
  awsIniFileProfile: null,
  awsIniFileName: null,
  transform: null,
  httpAuthFile: null
}

var options = {}
var searchBodyFromFile

for (var i in defaults) {
  options[i] = defaults[i]
  if (argv[i]) {
    options[i] = argv[i]
  }
  if (options[i] === 'true') { options[i] = true }
  if (options[i] === 'false') { options[i] = false }
  // searchBody needs to go from JSON to object in order for size to be added later during elasticsearch query
  if (i === 'searchBody') {
    options[i] = JSON.parse(options[i])
  }
    if(i == "searchBodyFile" && options[i]) {
        var filename = options[i];
        console.log("Rearding ES Query from JSON file " + filename);

        try {
            searchBodyFromFile = fs.readFileSync(filename, {encoding:'utf8'});
        } catch(err) {
            searchBodyFromFile = null;
            console.error("Failed to read ES Query from file " + filename);
            throw err;
        }

        try {
            searchBodyFromFile = JSON.parse(searchBodyFromFile);
        } catch(err) {
            console.error("Failed to parse the JSON ES query from file " + filename);
            throw err;
        }
    }
}

if(searchBodyFromFile) {
    options['searchBody'] = searchBodyFromFile;
}

var log = function (type, message) {
  if (type === 'debug') {
    if (options.debug === true) {
      message = new Date().toUTCString() + ' [debug] | ' + message
      console.log(message)
    } else {
      return false
    }
  } else if (type === 'error') {
    message = (new Date().toUTCString()) + ' | ' + message
    console.error(message)
  } else if (options.quiet === false) {
    message = (new Date().toUTCString()) + ' | ' + message
    console.log(message)
  } else {
    return false
  }
}

if (argv.help === true) {
  var helpText = require('fs').readFileSync(path.join(__dirname, '..', 'lib', 'help.txt'))
  helpText = helpText.toString()
  helpText = helpText.replace('%%version%%', packageData.version)
  console.log(helpText)
} else if (argv.version === true) {
  console.log(packageData.version)
} else {
  var dumper = new Elasticdump(options.input, options.output, options)

  dumper.on('log', function (message) { log('log', message) })
  dumper.on('debug', function (message) { log('debug', message) })
  dumper.on('error', function (error) { log('error', 'Error Emitted => ' + (error.message || JSON.stringify(error))) })

  if(argv.exportFromDate) {
    var exportDate = isValidDate(argv.exportFromDate);
    if(!exportDate) {
      log('error', 'Invalid export date supplied: ' + argv.exportFromDate + '. Please supply correct date in format YYYY-MM-DD, e.g.: 2017-07-15');
      process.exit(1);
    }

    var indexPrefix = argv['input-index-prefix'];
    if(!indexPrefix) {
      log('error', 'The parameter \'input-index-prefix\' is required when exporting from specific date');
      process.exit(1);
    }

    log('log', 'Determining the ElasticSearch index(es) with prefix \''+ indexPrefix + '\' for date: ' + exportDate.toUTCString());

    dumper.queryIndexForDate(argv['input-index-prefix'], exportDate, function(error, indexes) {
      if (error) {
        console.log('Failed with error')
        process.exit(1)
      } else {
        if(indexes) {
          var indexNames = []
          var msgPrefix = 'Export will start from the following ElasticSearch indexes:';
          for (var property in indexes) {
            if (indexes.hasOwnProperty(property)) {
              if(msgPrefix) {
                log('log', msgPrefix);
                msgPrefix = '';
              }
              log('log', ' ->' + property);
              indexNames.push(property);
            }
          }

          if( indexNames.length===0) {
            console.log('There are no data found for the specified date in the specified index pattern. If you expected some data, please re-check the input parameters. You can also go to Kibaba to make sure some data exist')
            process.exit(0);
          }

          // knowing the indexes, the export could start
          dumpFirstIndex( exportDate, indexNames, false );
        }
      }
    });
    return;
  }
}

function isValidDate(date)
{
  var matches = /^(\d{4})[-\/](\d{1,2})[-\/](\d{1,2})$/.exec(date);
  if (matches === null) return false;
  var d = parseInt(matches[3]);
  var m = parseInt(matches[2]) - 1;
  var y = parseInt(matches[1]);
  console.log('=>' + d + m + y);
  var composedDate = new Date(Date.UTC(y, m, d));
  if( composedDate.getDate() === d && composedDate.getMonth() === m && composedDate.getFullYear() === y ) {
    return composedDate;
  } else {
    return false;
  }
}

function dumpFirstIndex( exportDate, indexNames, appendOutput ) {
  if(indexNames.length===0) {
    log('log', 'Done exporting indexes with success');
    process.exit(0);
  }

  var index = indexNames[0];
  log('log', 'Preparing dump from index: ' + index);
  options['input-index'] = index;
  options['searchBody'] = getQueryToFilterByDate(exportDate);

  if(appendOutput) {
    options.appendOutput = true;
  }

  var dumper = new Elasticdump(options.input, options.output, options)

  dumper.on('log', function (message) { log('log', message) })
  dumper.on('debug', function (message) { log('debug', message) })
  dumper.on('error', function (error) { log('error', 'Error Emitted => ' + (error.message || JSON.stringify(error))) })

  dumper.dump(
    function (error) {
      if (error) {
        log('error', 'Failed to export data from indexes');
        process.exit(1)
      } else {
        indexNames.shift();
        dumpFirstIndex( exportDate, indexNames, true);
      }
    }
  );
}

function getQueryToFilterByDate(date) {

  var dd = date.getUTCDate();
  var mm = date.getUTCMonth()+1;
  var yyyy = date.getUTCFullYear();
  if(dd<10) dd='0'+dd;
  if(mm<10) mm='0'+mm;

  var dateString = '' + dd + '/' + mm + '/' + yyyy;

  var query =
    {"query":
      {"range":
        {"@timestamp":
          { "gte": dateString,
            "lte": dateString,
            "format": "dd/MM/yyyy",
            "time_zone": "+00:00"}
        }
      }
    }

  return query;
}